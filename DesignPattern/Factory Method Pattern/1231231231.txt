1. Templete Method 패턴
어떤 작업을 처리하는 일부분을 서브 클래스 (추상클래스) 로 캡슐화해서
전체 일을 수행하는 구조는 바꾸지면서 특정 단계에서 수행하는 내역을 바꾸는 패턴

> 전체적으로는 동일하면서 부분적으로는 다른 구문으로 구성된 메서드의 코드 중복을 최소화할 때 유용
> 동일한 기능을 상위 클래스에서 정의하면서 확장, 변화가 필요한 부분만 서브 클래스에서 구현할 수 있도록 함
> 전체적 알고리즘은 상위 클래스에서 구현하면서 다른 부분은 하위 클래스에서 구현할 수 있도록 함으로써 전체적인 알고리즘 코드를 재사용하는데 유용

Abstract Class (추상클래스) : 템플릿메서드를 정의하는 클래스, 하위 클래스에서 공통 알고리즘을 정의, 하위클래스에서 구현될 기능을 primitive 메서드, hook 메서드로 정의하는 클래스
Concreate Class : 물려받은 primitive 메서드, hook 메서드를 구현하는 클래스, 상위 클래스에 구현된 템플릿 메서드의 일반적인 알고리즘에서 하위 클래스에 적합하게 primitive 메서드나 hook 메서드를 오버라이드하는 클래스

#행위 패턴 : 객체나 클래스 사이의 알고리즘이나 책임 분배에 관련된 패턴, 한 객체가 혼자 수행할 수 없는 작업을 여러 개의 객체로 어떻게 분배하는지, 또 그러면서도 객체 사이의 결합도를 최소화하는 것에 중점을 둔다.

2. 추상 팩토리 패턴
서로 관련이 있는 객체들을 통째로 묶어서 팩토리 클래스로 만들고, 이를 팩토리 조건에 따라 생성하도록 다시 팩토리를 만들어서 객체를 생성하는 패턴
- 팩토리 메서드 패턴을 좀 더 캡슐화한 방식이다.

3. 팩토리 메서드 패턴
조건에 따른 객체 생성을 팩토리 클래스로 위임하여, 팩토리 클래스에서 객체를 생성하는 패턴
분기에 따른 객체의 생성을 직접하지 않고, 팩토리라는 클래스에 위임하여 팩토리 클래스가 객체를 생성하도록 하는 방식

Pro Git 책