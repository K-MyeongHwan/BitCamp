3. 팩토리 메서드 패턴 ( Factory Method Pattern ) : 
객체를 만들어내는 부분을 서브  클래스에 위임하는 패턴
> 객체를 만들 때 필요한 new 키워드를 호출하는 부분을 서브 클래스에 위임 ( 상속 ) 하는 것

객체 생성을 팩토리 클래스로 위임하여, 
팩토리 클래스에서 객체를 생성하는 패턴

객체의 생성을 직접하지 않고, 팩토리라는 클래스에 위임하여 
팩토리 클래스가 객체를 생성하도록 하는 방식

객체 생성 처리를 서브 클래스로 분리 해 처리하도록 캡슐화하는 패턴

팩토리 ( Factory ) : 공장 ( 무언가를 위한 ) > 객체를 만들어내는 공장 


팩토리 메소드 패턴을 사용하는 이유?
클래스간의 결합도를 낮추기 위함.
결합도 : 클래스의 변경점이 생겼을 때, 얼마나 다른 클래스에도 영향을 주는가

직접 객체를 생성해 사용하는 것을 방지하고, 서브 클래스에 위임함으로써 보다 효율적인 코드제어, 의존성 제거.
> 결합도를 낮춘다.
객체의 생성 코드를 별도의 클래스/메서드로 분리함으로써 객체 생성의 변화에 대비하는 데 유용하다.

단점 :

vs 
추상 팩토리 클래스 : 팩토리 메서드 패턴을 좀 더 캡슐화한 방식이다.

